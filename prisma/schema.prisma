generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cycle {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  vision    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeks     Week[]
}

model Week {
  id         Int         @id @default(autoincrement())
  weekNumber Int
  vision     String?
  reflection String?
  isExpanded Boolean     @default(true)
  cycleId    Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  days       Day[]
  goals      Goal[]
  keyResults KeyResult[]
  cycle      Cycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([cycleId, weekNumber])
}

model Goal {
  id        Int      @id @default(autoincrement())
  title     String
  weekId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model KeyResult {
  id        Int      @id @default(autoincrement())
  title     String
  target    Float
  current   Float    @default(0)
  weekId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
}

model Day {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     String?
  weekId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([weekId, date])
}

model Task {
  id            Int      @id @default(autoincrement())
  title         String
  completed     Boolean  @default(false)
  timeBlock     String
  scheduledTime String?
  dayId         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  day           Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model EisenhowerTask {
  id          String   @id @default(cuid())
  userId      String
  title       String
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  importance  Int      @default(4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Habit {
  id        Int           @id @default(autoincrement())
  title     String
  category  String        @default("personal")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  progress  DayProgress[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DayProgress {
  id        Int      @id @default(autoincrement())
  date      DateTime
  isChecked Boolean  @default(false)
  habitId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id])

  @@unique([habitId, date])
}

model Circle {
  id        Int      @id @default(autoincrement())
  title     String
  maxClicks Int      @default(5)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  verificationCode       String?
  verificationCodeExpiry DateTime?
  instagramAccessToken   String?
  instagramUserId        String?         @unique
  accounts               Account[]
  checkpoints            Checkpoint[]
  circles                Circle[]
  cycles                 Cycle[]
  habits                 Habit[]
  sessions               Session[]
  thoughts               Thought[]
  eisenhowerTasks        EisenhowerTask[]
  pomodoroStars          PomodoroStar[]
  instagramMessages      InstagramMessage[]
  instagramThreads       InstagramThread[]
  instagramAccount       InstagramAccount?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Checkpoint {
  id          String  @id @default(cuid())
  date        String
  isCompleted Boolean @default(false)
  emotion     String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
}

model Thought {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PomodoroStar {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model InstagramMessage {
  id            String   @id @default(cuid())
  messageId     String   @unique
  threadId      String
  fromId        String
  toId          String
  content       String
  timestamp     DateTime
  isRead        Boolean  @default(false)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread        InstagramThread @relation(fields: [threadId], references: [threadId])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([threadId])
  @@index([userId])
}

model InstagramThread {
  id            String   @id @default(cuid())
  threadId      String   @unique
  participantId String
  participantName String
  participantAvatar String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      InstagramMessage[]
  lastMessage   String?
  lastMessageAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model InstagramAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  accessToken   String
  tokenType     String
  expiresAt     DateTime
  scope         String
  pageId        String?
  pageAccessToken String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
